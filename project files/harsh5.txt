import pandas as pd
import numpy as np
import os

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.ensemble import RandomForestClassifier
from xgboost import XGBClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

# ✅ Check if the file exists
if not os.path.exists("indian_liver_patient.csv"):
    raise FileNotFoundError("❌ File 'indian_liver_patient.csv' not found. Please place it in the script folder.")

# ✅ Load the dataset
df = pd.read_csv("indian_liver_patient.csv")

# ✅ Rename columns
df.columns = ['Age', 'Gender', 'Total_Bilirubin', 'Direct_Bilirubin', 'Alkaline_Phosphotase',
              'Alamine_Aminotransferase', 'Aspartate_Aminotransferase', 'Total_Proteins',
              'Albumin', 'Albumin_and_Globulin_Ratio', 'Liver_Disease']

# ✅ Fill missing values
df['Albumin_and_Globulin_Ratio'].fillna(df['Albumin_and_Globulin_Ratio'].mean(), inplace=True)

# ✅ Encode Gender: Male=1, Female=0
df['Gender'] = LabelEncoder().fit_transform(df['Gender'])

# ✅ Convert Liver_Disease: 1 = disease, 2 = no disease → 1 and 0
df['Liver_Disease'] = df['Liver_Disease'].apply(lambda x: 1 if x == 1 else 0)

# ✅ Features and target
X = df.drop('Liver_Disease', axis=1)
y = df['Liver_Disease']

# ✅ Standardize the features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# ✅ Split into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# ✅ Train Random Forest model
rf_model = RandomForestClassifier(random_state=42)
rf_model.fit(X_train, y_train)
rf_preds = rf_model.predict(X_test)

# ✅ Train XGBoost model (safe version)
xgb_model = XGBClassifier()
xgb_model.fit(X_train, y_train)
xgb_preds = xgb_model.predict(X_test)

# ✅ Evaluation function
def evaluate_model(name, y_true, y_pred):
    print(f"\n--- {name} ---")
    print(f"Accuracy: {accuracy_score(y_true, y_pred):.4f}")
    print("Confusion Matrix:\n", confusion_matrix(y_true, y_pred))
    print("Classification Report:\n", classification_report(y_true, y_pred))

# ✅ Evaluate both models
evaluate_model("Random Forest", y_test, rf_preds)
evaluate_model("XGBoost", y_test, xgb_preds)
