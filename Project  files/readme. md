# Importing necessary libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix, roc_auc_score
import matplotlib.pyplot as plt
import seaborn as sns

# Step 1: Load the data (assume CSV file format)
df = pd.read_csv('liver_cirrhosis_data.csv')

# Step 2: Explore the dataset
print(df.head())  # Display first few rows
print(df.info())  # Info about missing values, data types, etc.
print(df.describe())  # Statistical summary of numerical columns

# Step 3: Data Preprocessing
# Handle missing values (if any)
df.fillna(df.mean(), inplace=True)  # Simple imputation with column means

# Convert categorical features to numeric using one-hot encoding (if necessary)
df = pd.get_dummies(df, drop_first=True)

# Step 4: Define features (X) and target variable (y)
X = df.drop(columns=['cirrhosis'])  # 'cirrhosis' is the target column
y = df['cirrhosis']

# Step 5: Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 6: Feature Scaling (Standardization)
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Step 7: Initialize the model - Random Forest Classifier
model = RandomForestClassifier(n_estimators=100, random_state=42)

# Step 8: Train the model
model.fit(X_train, y_train)

# Step 9: Make predictions on the test set
y_pred = model.predict(X_test)

# Step 10: Evaluate the model
print("Classification Report:")
print(classification_report(y_test, y_pred))

print("Confusion Matrix:")
cm = confusion_matrix(y_test, y_pred)
sns.heatmap(cm, annot=True, fmt="d", cmap="Blues", xticklabels=['No Cirrhosis', 'Cirrhosis'], yticklabels=['No Cirrhosis', 'Cirrhosis'])
plt.title("Confusion Matrix")
plt.show()

# Step 11: ROC-AUC Score (for binary classification performance)
roc_auc = roc_auc_score(y_test, model.predict_proba(X_test)[:, 1])
print(f"ROC-AUC Score: {roc_auc:.4f}") executable files
